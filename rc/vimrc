let mapleader      = ' '
let maplocalleader = ' '

filetype plugin on

let s:darwin = has('mac')


call plug#begin('~/.vim/plugged')

"""""""""""""""""""""""""
" Style
"""""""""""""""""""""""""
Plug 'tomasr/molokai'
Plug 'junegunn/goyo.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'


"""""""""""""""""""""""""
" UTILITY
"""""""""""""""""""""""""
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'junegunn/fzf', { 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'editorconfig/editorconfig-vim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'elmcast/elm-vim', {'for': ['elm']}
Plug 'fsharp/vim-fsharp', {
      \ 'for': 'fsharp',
      \ 'do':  'make fsautocomplete',
      \}

"""""""""""""""""""""""""
" SYNTAX
"""""""""""""""""""""""""
Plug 'groenewege/vim-less'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'derekwyatt/vim-scala'
Plug 'dag/vim-fish'
Plug 'pearofducks/ansible-vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'fatih/vim-nginx' , {'for' : 'nginx'}
Plug 'elzr/vim-json', {'for' : 'json'}
Plug 'ekalinin/Dockerfile.vim', {'for' : 'Dockerfile'}
Plug 'posva/vim-vue', {'for': 'vue'}
Plug 'keith/swift.vim', {'for': 'swift'}
Plug 'leafgarland/typescript-vim', {'for': 'typescript'}
Plug 'towolf/vim-helm'
Plug 'norcalli/nvim-colorizer.lua'
" Plug 'fatih/vim-go'

"""""""""""""""""""""""""
" FORMAT
"""""""""""""""""""""""""
Plug 'hashivim/vim-hashicorp-tools'
Plug 'fatih/vim-hclfmt'



"""""""""""""""""""""""""
" EVERYTHING
"""""""""""""""""""""""""
Plug 'w0rp/ale'
Plug 'lifepillar/pgsql.vim'
Plug 'tpope/vim-sensible'


call plug#end()

set hidden

" Conquer of Completion

let g:coc_global_extensions= [
            \   'coc-powershell-patched',
            \   'coc-go',
            \   'coc-gitignore',
            \   'coc-tsserver',
            \   'coc-python ',
            \   'coc-json',
            \   'coc-html',
            \   'coc-css',
            \   'coc-stylelint',
            \   'coc-yaml',
            \   'coc-fish',
            \   'coc-webpack',
            \   'coc-docker',
            \   'coc-sh',
            \   'coc-fsharp',
            \   'coc-omnisharp',
            \   'coc-vimlsp',
            \   'coc-vetur',
            \]

set updatetime=300
set shortmess+=c
set signcolumn=yes

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)

" Ale
let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'javascript': ['prettier', 'eslint'],
            \   'typescript': ['prettier', 'eslint'],
            \   'elm': ['format'],
            \   'sh': ['shfmt'],
            \   'go': ['gofmt'],
            \   'terraform': ['terraform'],
            \   'css': ['prettier'],
            \   'scss': ['prettier'],
            \   'json': ['prettier'],
            \   'fsharp': ['fantomas'],
            \   'python': ['autopep8', 'black'],
            \}

let g:ale_linters = {
            \   'go': ['golangci-lint'],
            \   'fsharp': ['dotnet-fsharplint -sf'],
            \   'terraform': ['terraform', 'tflint'],
            \}



let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1
let g:ale_completion_enabled = 0
let g:ale_sign_column_always = 1

" Python settings
" C0330: Disable wrong hanging indentation
" https://github.com/psf/black/issues/48
" C0116: Disable missing docstring
let g:ale_python_pylint_options = '--disable=C0330,C0116'
" Use linelength 88 (what black uses)
let g:ale_python_flake8_options = '--max-line-length=88'

" Go settings
let g:ale_go_golangci_lint_package = 1
let g:go_def_mapping_enabled = 0
let g:go_code_completion_enabled = 0
let g:go_fmt_autosave = 0
let g:go_mod_fmt_autosav = 0

" PGSQL
let g:sql_type_default = 'pgsql'


" Style
set background=dark

try
    colorscheme molokai
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme default
endtry

let g:airline_theme='wombat'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

syntax on

" lua require'colorizer'.setup()


" ----------------------------------------------------------------------------
" Tabs and splits
" ----------------------------------------------------------------------------
set splitbelow
set splitright


" iTerm needs update:
" ALT UP: [1;3A
" ALT LEFT: [1;3D
" ALT RIGHT: [1;3C
nmap <silent> <A-Up> :tabnew<CR>
" nmap <silent> <A-Down> :tabclose<CR>
nmap <silent> <A-Left> :tabprev<CR>
nmap <silent> <A-Right> :tabnext<CR>

nmap <silent> <A-S-Left> :exec PrevSlide()<CR>
nmap <silent> <A-S-Right> :exec NextSlide()<CR>


function! PrevSlide()
    :Goyo!
    :tabprev
    :Goyo
endfunction

function! NextSlide()
    :Goyo!
    :tabnext
    :Goyo
endfunction

" ----------------------------------------------------------------------------
" <tab> / <s-tab> | Circular windows navigation
" ----------------------------------------------------------------------------
nnoremap <tab>   <c-w>w
nnoremap <S-tab> <c-w>W

" ----------------------------------------------------------------------------
" #!! | Shebang
" ----------------------------------------------------------------------------
inoreabbrev <expr> #!! "#!/usr/bin/env" . (empty(&filetype) ? '' : ' '.&filetype)

" ============================================================================
" FZF {{{
" ============================================================================

if has('nvim') || has('gui_running')
  let $FZF_DEFAULT_OPTS .= ' --inline-info'
endif

" Hide statusline of terminal buffer
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" nnoremap <silent> <Leader><Leader> :Files<CR>
nnoremap <silent> <expr> <Leader><Leader> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<cr>"
" nnoremap <silent> <Leader>C        :Colors<CR>
nnoremap <silent> <Leader><Enter>  :Buffers<CR>
nnoremap <silent> <Leader>l        :Lines<CR>
" nnoremap <silent> <Leader>s        :Snippets<CR>
nnoremap <silent> <Leader>f        :Filetypes<CR>
nnoremap <silent> <Leader>ag       :Ag<CR>
nnoremap <silent> <Leader>`        :Marks<CR>

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Maybe remove this?
" function! s:plug_help_sink(line)
"   let dir = g:plugs[a:line].dir
"   for pat in ['doc/*.txt', 'README.md']
"     let match = get(split(globpath(dir, pat), "\n"), 0, '')
"     if len(match)
"       execute 'tabedit' match
"       return
"     endif
"   endfor
"   tabnew
"   execute 'Explore' dir
" endfunction
"
" command! PlugHelp call fzf#run(fzf#wrap({
"   \ 'source': sort(keys(g:plugs)),
"   \ 'sink':   function('s:plug_help_sink')}))

" }}}

" Annoying temporary files
" set backupdir=/tmp//,.
" set directory=/tmp//,.
" if v:version >= 703
"   set undodir=/tmp//,.
" endif


" 80 chars/line
set textwidth=0
if exists('&colorcolumn')
  set colorcolumn=80
endif



" Use Vim settings, rather then Vi settings (much better!).
set nocompatible
set nocursorline
set encoding=utf-8
set number

" support all three newline formats
set fileformats=unix,dos,mac

" automagic indentation
set nocindent
set nosmartindent
filetype indent on

" Whitespace stuff
" set nowrap        " don't soft wrap long lines
set tabstop=4     " spaces per tab
set shiftwidth=4  " characters to indent
set softtabstop=4 " make spaces feel like tabs
set expandtab     " insert space on tab

" Paste settings
set pastetoggle=<C-x>
set showmode



" set the commandheight
set cmdheight=2

" do not keep a backup files
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.beam

" keep 50 lines of command line history
set history=50

" Shut up
set noerrorbells visualbell t_vb= " don't whine

set showcmd

" Searching
set hlsearch   " highlight searched expressions
set ignorecase " case insensitive
set smartcase  " ... unless there's a capital letter

" Press Space to dismiss highlighting
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" smart search (override 'ic' when pattern has uppers)
set scs

" Set status line
" set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P
set statusline=%t       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file


" Always display a status line at the bottom of the window
set laststatus=2

set joinspaces

" showmatch: Show the matching bracket for the last ')'?
set showmatch


set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent


" Removes trailing spaces
" function! <SID>StripTrailingWhitespaces()
"     " Preparation: save last search, and cursor position.
"     let _s=@/
"     let l = line(".")
"     let c = col(".")
"     " Do the business:
"     %s/\s\+$//e
"     " Clean up: restore previous search history, and cursor position
"     let @/=_s
"     call cursor(l, c)
" endfunction



"
" Language section
"

augroup rainbow_lisp
      autocmd!
      autocmd FileType lisp,clojure,scheme,elm,go,javascript RainbowParentheses
augroup END
