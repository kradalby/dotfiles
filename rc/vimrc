let s:darwin = has('mac')

call plug#begin('~/.vim/plugged')

Plug 'tomasr/molokai'

Plug 'autozimu/LanguageClient-neovim', {
            \ 'branch': 'next',
            \ 'do': 'bash install.sh',
            \ }

Plug 'junegunn/fzf', { 'do': './install --all' }
Plug 'junegunn/fzf.vim'

function! BuildYCM(info)
    if a:info.status == 'installed' || a:info.force
        !./install.py --clang-completer --gocode-completer
    endif
endfunction
Plug 'Valloric/YouCompleteMe', { 'for': ['c', 'cpp'], 'do': function('BuildYCM') }


" Languages
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'elmcast/elm-vim'
Plug 'groenewege/vim-less'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'derekwyatt/vim-scala'
Plug 'honza/dockerfile.vim'
Plug 'dag/vim-fish'


" Lint
Plug 'w0rp/ale'


" Plug 'roxma/python-support.nvim'
" Plug 'roxma/nvim-completion-manager'

" if !has('nvim')
"     Plug 'roxma/vim-hug-neovim-rpc'
" endif

""Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"Plug 'hail2u/vim-css3-syntax'
"Plug 'ervandew/supertab'
"Plug 'vim-scripts/dhcpd.vim'
"Plug 'kradalby/snipmate.vim'
"Plug 'godlygeek/tabular'
"Plug 'Townk/vim-autoclose'
"Plug 'vim-scripts/HTML-AutoCloseTag'
"Plug 'nvie/vim-flake8'
"Plug 'sheerun/vim-polyglot'
"Plug 'seveas/bind.vim'
"Plug 'jamessan/vim-gnupg'
"Plug 'PProvost/vim-ps1'
"Plug 'dag/vim-fish'
"Plug 'maxbrunsfeld/vim-emacs-bindings'

call plug#end()

set hidden

" Language server
let g:LanguageClient_serverCommands = {
            \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
            \ 'javascript': ['javascript-typescript-stdio'],
            \ 'javascript.jsx': ['javascript-typescript-stdio'],
            \ 'go': ['go-langserver'],
            \ }


" Language completion
let g:ycm_semantic_triggers = {
     \ 'elm' : ['.'],
     \}


" Linter
let g:ale_fixers = {
            \   'javascript': ['eslint'],
            \   'elm': ['elm-format-0.18'],
            \}

let g:ale_fix_on_save = 1


nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

set background=dark

try
    colorscheme molokai
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme default
endtry

syntax on


" create convinient tab keys
nnoremap [ :tabnew<cr>
nnoremap ' :tabnext<cr>
nnoremap ; :tabprev<cr>

" Set default shell to zsh
set shell=/bin/sh


" Use Vim settings, rather then Vi settings (much better!).
set nocompatible

" cursorsline
set cursorline

" Turn on the verboseness to see everything vim is doing.
"set verbose=9

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" set utf-8
set encoding=utf-8

set number
"if version >= 703
"    autocmd InsertEnter * :set nornu
"    autocmd InsertEnter * :set number
"    autocmd InsertLeave * :set nonumber
"    autocmd InsertLeave * :set relativenumber
"    set relativenumber
"else
"    set number
"endif

set wildmenu


" support all three newline formats
set fileformats=unix,dos,mac


" automagic indentation
set autoindent
set nocindent
set nosmartindent
filetype indent on

" Whitespace stuff
" set nowrap        " don't soft wrap long lines
set tabstop=4     " spaces per tab
set shiftwidth=4  " characters to indent
set softtabstop=4 " make spaces feel like tabs
set expandtab     " insert space on tab
set list          " show invisible characters
set listchars=tab:>·,trail:· " ... but only show tabs and trailing whitespace

" set the commandheight
set cmdheight=2

" do not keep a backup files
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.beam

" keep 50 lines of command line history
set history=50

" show the cursor position all the time
set ruler

" Shut up
set noerrorbells visualbell t_vb= " don't whine

set showcmd

" Searching
set hlsearch   " highlight searched expressions
set incsearch  " incremental searching
set ignorecase " case insensitive
set smartcase  " ... unless there's a capital letter

" Press Space to dismiss highlighting
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>


" smart search (override 'ic' when pattern has uppers)
set scs

" Set 'g' substitute flag on
" set gdefault

" Set status line
" set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P
set statusline=%t       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file


" Always display a status line at the bottom of the window
set laststatus=2

" Set vim to use 'short messages'.
" set shortmess=a

" Insert two spaces after a period with every joining of lines.

" I like this as it makes reading texts easier (for me, at least).
set joinspaces

" showmatch: Show the matching bracket for the last ')'?
set showmatch


set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent


" Select all.
map <c-a> ggVG

" Undo in insert mode.
imap <c-z> <c-o>u

" Removes trailing spaces
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
