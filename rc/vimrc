call plug#begin('~/.vim/plugged')

"Plug 'whatyouhide/vim-gotham'
"Plug 'farseer90718/flattr.vim'
Plug 'tomasr/molokai'
Plug 'hail2u/vim-css3-syntax'
Plug 'ervandew/supertab'
Plug 'vim-scripts/dhcpd.vim'
Plug 'kradalby/snipmate.vim'
Plug 'godlygeek/tabular'
Plug 'Townk/vim-autoclose'
Plug 'vim-scripts/HTML-AutoCloseTag'
Plug 'nvie/vim-flake8'
Plug 'sheerun/vim-polyglot'
Plug 'seveas/bind.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

call plug#end()


set background=dark

try
    colorscheme molokai
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme default
endtry

syntax on


" create convinient tab keys
nnoremap [ :tabnew<cr>
nnoremap ' :tabnext<cr>
nnoremap ; :tabprev<cr>

" Set default shell to zsh
set shell=/bin/sh


" Use Vim settings, rather then Vi settings (much better!).
set nocompatible

" cursorsline
set cursorline

" Turn on the verboseness to see everything vim is doing.
"set verbose=9

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" set utf-8
set encoding=utf-8

set number
"if version >= 703
"    autocmd InsertEnter * :set nornu
"    autocmd InsertEnter * :set number
"    autocmd InsertLeave * :set nonumber
"    autocmd InsertLeave * :set relativenumber
"    set relativenumber
"else
"    set number
"endif

set wildmenu


" support all three newline formats
set fileformats=unix,dos,mac


" automagic indentation
set autoindent
set nocindent
set nosmartindent
filetype indent on

" Whitespace stuff
" set nowrap        " don't soft wrap long lines
set tabstop=4     " spaces per tab
set shiftwidth=4  " characters to indent
set softtabstop=4 " make spaces feel like tabs
set expandtab     " insert space on tab
set list          " show invisible characters
set listchars=tab:>·,trail:· " ... but only show tabs and trailing whitespace

" set the commandheight
set cmdheight=2

" do not keep a backup files 
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup


" keep 50 lines of command line history
set history=50

" show the cursor position all the time
set ruler

" Shut up
set noerrorbells visualbell t_vb= " don't whine

set showcmd

" Searching
set hlsearch   " highlight searched expressions
set incsearch  " incremental searching
set ignorecase " case insensitive
set smartcase  " ... unless there's a capital letter

" Press Space to dismiss highlighting
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>


" smart search (override 'ic' when pattern has uppers)
set scs

" Set 'g' substitute flag on
" set gdefault

" Set status line
set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P


" Always display a status line at the bottom of the window
set laststatus=2

" Set vim to use 'short messages'.
" set shortmess=a

" Insert two spaces after a period with every joining of lines.

" I like this as it makes reading texts easier (for me, at least).
set joinspaces

" showmatch: Show the matching bracket for the last ')'?
set showmatch


set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent


" Java specific stuff
let java_highlight_all=1
let java_highlight_debug=1

let java_ignore_javadoc=1
let java_highlight_functions=1
let java_mark_braces_in_parens_as_errors=1

" highlight strings inside C comments
let c_comment_strings=1

" for the TOhtml command
let html_use_css=1


" Select all.
map <c-a> ggVG

" Undo in insert mode.
imap <c-z> <c-o>u

" Removes trailing spaces
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! UpdateModifiedTimeMarkdown()
    %s/Modified:.*/\='Modified: ' . strftime("%Y-%m-%d %H:%M")/g
endfunction

nnoremap <silent> <Leader>s :call <SID>StripTrailingWhitespaces()<CR>
nnoremap <C-n> :call UpdateModifiedTimeMarkdown()<cr>

augroup configgroup
    autocmd FileType bindzone setlocal tabstop=4
    autocmd FileType bindzone setlocal shiftwidth=4
    autocmd FileType bindzone setlocal noexpandtab
augroup END
