#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
#if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
#  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
#fi
#


#source ~/git/dotfiles/antigen/antigen.zsh
#
#antigen bundle sorin-ionescu/prezto
#antigen bundle zsh-users/zsh-syntax-highlighting
#antigen bundle tarruda/zsh-autosuggestions
#
#antigen theme steeef
#
#antigen apply

source "${HOME}/git/dotfiles/zgen/zgen.zsh"

# check if there's no init script
if ! zgen saved; then
    echo "Creating a zgen save"

    # prezto options
    zgen prezto editor key-bindings 'emacs'
    zgen prezto prompt theme 'steeef'

    # prezto and modules
    zgen prezto
    zgen prezto git
    zgen prezto command-not-found
#    zgen prezto syntax-highlighting
    zgen prezto environment
    zgen prezto terminal
#    zgen prezto editor
    zgen prezto history
    zgen prezto directory
    zgen prezto spectrum
    zgen prezto utility
    zgen prezto completion
    zgen prezto osx
    zgen prezto prompt

    # completions
    zgen load tarruda/zsh-autosuggestions
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load zsh-users/zsh-completions src
    zgen load djui/alias-tips


    zgen prezto history-substring-search

    zgen load b4b4r07/emoji-cli
    zgen load uvaes/fzf-marks

    # save all to init script
    zgen save
fi


# Customize to your needs...

#Aliases
alias tb="nc termbin.com 9999"
alias cm="curl --silent http://whatthecommit.com/index.txt"
alias fuck='sudo $(fc -ln -1)'
alias ehosts='sudo vim /etc/hosts'
alias n='nvim'
alias markdown='python3 -m markdown -x markdown.extensions.tables'
alias s='xargs perl -pi -E'

alias rsakey='ssh-keygen -t rsa -b 4096 -o -a 100'
alias ed25519key='ssh-keygen -t ed25519 -o -a 100'

# Git aliases

alias ga='git add'
alias gaa='git add .'
alias gc='git commit'
alias gcm='git commit -m'
alias gco='git checkout'
alias gcob='git checkout -b'
alias gcom='git checkout master'
alias gd='git diff'
alias gb='git branch'
alias gbd='git branch -d '
alias gp='git pull'
alias gss='git status -s'
alias gst='git stash'

gitalias () {
    alias | ag git | ag '^g.*' --nocolor
}

#Functions
push () {
    git push origin $(git rev-parse --abbrev-ref HEAD)
}

pullall () {
    for dir in *
    do
        figlet $dir
        cd $dir
        git pull origin $(git rev-parse --abbrev-ref HEAD)
        cd ..
    done
}

pushall () {
    for dir in *
    do
        figlet $dir
        cd $dir
        git pull origin $(git rev-parse --abbrev-ref HEAD)
        cd ..
    done
}

statusall () {
    for dir in *
    do
        figlet $dir
        cd $dir
        git status -s
        cd ..
    done
}

gi () {
    curl -L -s https://www.gitignore.io/api/$@ ;
}

swap () {
    tmp=`mktemp`
    mv $1 $tmp
    mv $2 $1
    mv $tmp $2
}

compile-ssh () {
    SSH_CONFIG=~/git/dotfiles/ssh/config
    SSH_MODULE_CONFIGS=~/git/dotfiles/ssh/config.d
    rm -rf $SSH_CONFIG
    cat $SSH_MODULE_CONFIGS/* > $SSH_CONFIG
    cat $SSH_CONFIG
}

rmkh () {
    sed -i $1'd' ~/.ssh/known_hosts
}

senv () {
    source env/bin/activate
}

states () {
    echo "Pulling dotfiles update"
    cd ~/git/dotfiles; git pull; cd -

    if [[ "$OSTYPE" == darwin* ]];
    then
        echo "Running brew check to sync up software"
        cd ~/git/dotfiles
        brew update
        brew cask update
        brew bundle install
        brew upgrade
        cd -
    fi
}

if [[ "$OSTYPE" == darwin* ]];
then

    vnc () {
        re='^[0-9]+$'
        if [[ $1 =~ $re ]] ; then
            open vnc://localhost:$1
        else
            open vnc://$1:$2
        fi

    }

    socks () {
        help="Usage: eth or wlan, on or off"
        if [[ $1 =  "eth" ]]; then
            if [[ $2 = "on" ]]; then
                sudo networksetup -setsocksfirewallproxystate "Thunderbolt Ethernet" on
            elif [[ $2 = "off" ]]; then
                sudo networksetup -setsocksfirewallproxystate "Thunderbolt Ethernet" off
            else
                echo $help
            fi
        elif [[ $1 = "wlan" ]]; then
            if [[ $2 = "on" ]]; then
                sudo networksetup -setsocksfirewallproxystate "Wi-Fi" on
            elif [[ $2 = "off" ]]; then
                sudo networksetup -setsocksfirewallproxystate "Wi-Fi" off
            else
                echo $help
            fi
        else
            echo $help
        fi
    }

    ip () {
        for i in $(seq 0 $(ifconfig | grep en.: | wc -l))
        do
            echo "en$i: $(ipconfig getifaddr en$i)"
        done
    }

    wifi () {
        int=en0
        int_status=$(networksetup -getairportpower $int)

        if [ "$int_status" = "Wi-Fi Power ($int): On" ]; then
            networksetup -setairportpower $int off
        else
            networksetup -setairportpower $int on
        fi
    }

fi

#if [ -f /usr/local/bin/virtualenvwrapper.sh ];
#then
#    source /usr/local/bin/virtualenvwrapper.sh
#fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

#zle-line-init() {
#    zle autosuggest-start
#}
#zle -N zle-line-init
#
zle -N emoji::cli
bindkey "^s" emoji::cli

